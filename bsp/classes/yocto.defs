# This script simplifies the process of integration of
# yocto pre-built packages  with the SDK using the classes 
# for each
#! \defgroup yocto_class Yocto Class
#! \ingroup classes
#! \section intro Introduction
#! 
#!
#! \section public_params Public Parameters
#! The following is a list of parameters that may be set according to an application's specific requirements.
#! <ul>
#!<li>
#!<b>YOCTO_CONFIG_URL</b> The url from where to download the Config.yocto file, wich contains a list of the pre-built availble packages for the menuconfig menu
#!
#!<li>
#!<b>YOCTO_BUILD_FILE</b> The name of the file that stores all the pre-built packages selected from the menuconfig
#!
#!<li>
#!<b>YOCTO_PKG_SRC</b> The name of the file that contains all the requeriments that will be fetched
#!
#!<li>
#!<b>YOCTO_PKG_TYPE</b> Extension of the software packages stored in the fetched tarball 
#!
#!<li>
#!<b>YOCTO_DEST_DIR</b> The directory in which the selected packages will be filtered, by default defined through the $(ARCH) directory, so that builds for diferent architectures may be produced without conflicts
#!
#! <li>
#! <b>YOCTO_SRC_EXTRACT_DIRECTORY_NAME</b>: The directory which contains the package's. Set to the "src" directory by default, so there's no need to modify this variable unless another directory name is required.
#!
#! <li>
#! <b>YOCTO_TOOLCHAIN</b>: Corresponds to the toolchain used to create the packages.
#!
#! </ul>
# By default the system installs all the executable data directly to
# $(FSROOT), and all the development files (header, man, info) into
# $(FSDEVROOT)

.PHONY: yocto_build yocto_fetch yocto_prefetch yocto_toolchain yocto_uninstall yocto_distclean yocto_packages yocto_env yocto_install_dev yocto_install_fs yocto_dest_dir yocto_dest_cp yocto_preconfig yocto_files_refresh

include $(CLASSES)/flags.defs


default_rule: yocto_build

YOCTO_PKG_TYPE?=deb
YOCTO_SRC_EXTRACT_DIRECTORY_NAME?=yocto-apps
YOCTO_DEST_DIR?=$(ARCH)
YOCTO_PATH?=$(DEVDIR)/fs/yocto
YOCTO_OVERLAY_DIR?=yocto-overlay

export YOCTO_PKG_TYPE
export YOCTO_SRC_EXTRACT_DIRECTORY_NAME
export YOCTO_DEST_DIR
export YOCTO_DIR
export FSDEVROOT


YOCTO_BUILD_FILE?= yocto_pkg
YOCTO_PKG_SRC = yocto_src_name
VERBOSE?=0
FILES=$(shell cat ${YOCTO_BUILD_FILE})

FETCHER_NO_DOWNLOAD?=no

#Variables used to control package download retries
export FETCHER_DOWNLOAD_RETRY?=no
export FETCHER_MAX_DOWNLOAD_RETRIES?=3
export FETCHER_DOWNLOAD_RETRY_DELAY?=300 #time in seconds

#Variables used by download limit rate
export FETCHER_MAX_DOWNLOAD_RATE?=1G
export FETCHER_EXTRACT_DIRECTORY_NAME =$(YOCTO_SRC_EXTRACT_DIRECTORY_NAME)


ifneq ($(MAKECMDGOALS),sim)                                                                        
  CORRECT_LA_SED_EXPRESSION?=s?libdir='/usr?libdir='$(FSDEVROOT)/usr?g;\
        s?\ =/usr/lib?\ =$(FSDEVROOT)/usr/lib?g; \
        s? =/? /?g; \
        s? -L=/? -L/?g
  CORRECT_PKGCONFIG_SED_EXPRESSION?=s?prefix=/usr?prefix=$(FSDEVROOT)/usr?g;\
        s?includedir=/usr/include?includedir=$(FSDEVROOT)/usr/include?g; \
        s?libdir=/usr/lib?libdir=$(FSDEVROOT)/usr/lib?g; \
	s?exec_prefix=.*?exec_prefix=$(FSDEVROOT)/usr?g; \
	s?icondir=.*?icondir=$(FSDEVROOT)/usr/share/icons?g; \
	s?datadir=.*?datadir=$(FSDEVROOT)/usr/share?g; \
	s?includex11dir=.*?includex11dir=$(FSDEVROOT)/usr/include/X11?g;
else
  CORRECT_LA_SED_EXPRESSION?=s?libdir='/usr?libdir='$(SIMROOT)/usr?g;\
        s?\ /usr/lib?\ $(SIMROOT)/usr/lib?g
  CORRECT_PKGCONFIG_SED_EXPRESSION?=s?prefix=/usr?prefix=$(SIMROOT)/usr?g;\
        s?includedir=/usr/include?includedir=$(SIMROOT)/usr/include?g; \
        s?libdir=/usr/lib?libdir=$(SIMROOT)/usr/lib?g;
endif

#####################
# Pre Config target #
#####################

yocto_preconfig:
ifeq ($(CONFIG_FS_YOCTO),y)
	$(V)$(ECHO) "Attempting to fetch list of available yocto pre-built package"
ifeq ($(CONFIG_FS_YOCTO_AUTO_UPDATE),y)
		$(V)rm $(DEVDIR)/fs/mach/Config.yocto
		$(V)touch $(DEVDIR)/fs/mach/Config.yocto
endif
	$(V)if [ -z `egrep -o "FS_YOCTO_PKG" ${DEVDIR}/fs/mach/Config.yocto | head -n 1` ]; then \
		wget -q -t 3 $(YOCTO_CONFIG_URL)Config.yocto -O $(DEVDIR)/fs/mach/Config.yocto ;\
		sed -i '1s/^/#Do not manually change this file - your changes will be lost.\n/'  $(DEVDIR)/fs/mach/Config.yocto ;\
		sed -i '1s/^/#This file is autogenerated by yocto.class\n/'  $(DEVDIR)/fs/mach/Config.yocto ;\
		fi
endif
####################
#   Yocto targets  #
####################

ifeq ($(CONFIG_FS_YOCTO),y)
yocto_build: yocto_files_refresh yocto_packages yocto_toolchain yocto_prefetch yocto_fetch yocto_dest_dir yocto_dest_cp
	$(V)touch $(BUILT_FLAG)
else
yocto_build:
endif

yocto_files_refresh:
	$(V)if [ -e $(YOCTO_BUILD_FILE) ]; then \
		rm $(YOCTO_BUILD_FILE);\
	fi
	$(V)touch $(YOCTO_BUILD_FILE)
	$(V)if [ -e $(YOCTO_PKG_SRC) ]; then \
		rm $(YOCTO_PKG_SRC);\
	fi
	$(V)touch $(YOCTO_PKG_SRC)


yocto_toolchain:
	$(V)$(ECHO) "Getting Toolchain information"

yocto_prefetch:
	$(V)for lib in $(FILES); do \
		echo $$lib-`grep -ri "FS_YOCTO_PKG_"$${lib}"_"'[0-9]\+' $${DEVDIR}/fs/mach/Config.yocto | grep -v "select" | grep -v "depends" | awk -F _ '{print $$(NF-1)}' | cut -d - -f1`.tar.bz2 >>$(YOCTO_PKG_SRC);\
	done

yocto_fetch:
ifeq ($(FETCHER_NO_DOWNLOAD),no)
		$(V)if [ ! -e $(FETCHED_FLAG) ]; then \
		for tarfile in $(shell cat ${YOCTO_PKG_SRC}); do \
			`echo "export PKG_TARBALL=$$tarfile"`;\
			`echo "export FETCHER_EXTRACT_DIRECTORY_NAME=$${YOCTO_SRC_EXTRACT_DIRECTORY_NAME}/$${tarfile%-*}"`;\
			echo Source code for $$PKG_TARBALL not found, fetching it... ;\
			$(DEVDIR)/bsp/scripts/fetcher.sh $(DEBUG);\
			rm $(FETCHED_FLAG);\
		done ;\
		touch $(FETCHED_FLAG) ;\
		fi
else
	$(V)touch $(FETCHED_FLAG)
endif

yocto_dest_dir:
	$(V)mkdir -p $(YOCTO_DEST_DIR)/dev-packages
ifneq ($(CONFIG_FS_YOCTO_DEBUG),)
	$(V)mkdir -p $(YOCTO_DEST_DIR)/dbg-packages
else
	$(V)mkdir -p $(YOCTO_DEST_DIR)/packages
endif

yocto_dest_cp:
	$(V)for pkg in $(FILES); do \
			cd $(YOCTO_SRC_EXTRACT_DIRECTORY_NAME)/$$pkg/$(YOCTO_PKG_TYPE); \
			PACKAGE_DEV=`ls | grep -v "\-doc" | grep -v "\-dbg"  |	grep -v "\-test" |	grep -v "\-pod"`; \
			if [ ! -z  `echo $$PACKAGE_DEV | cut -d' ' -f1` ] ; then \
				cp -u $$PACKAGE_DEV $(YOCTO_PATH)/$(YOCTO_DEST_DIR)/dev-packages ;\
			fi; \
			cd ${YOCTO_PATH};\
	done

ifneq ($(CONFIG_FS_YOCTO_DEBUG),)
	$(V)for pkg in $(FILES); do \
			cd  ${YOCTO_SRC_EXTRACT_DIRECTORY_NAME}/$$pkg/${YOCTO_PKG_TYPE}; \
			cp -u `ls | grep  -v "\-doc" |\
			grep -v "\-dev" |\
			grep -v "\-staticdev" |\
			grep -v $${lib}_ \
			` $(YOCTO_PATH)/$(YOCTO_DEST_DIR)/dbg-packages/ ;\
			cd ${YOCTO_PATH};
	done
else
	$(V)for pkg in $(FILES); do \
			cd $(YOCTO_SRC_EXTRACT_DIRECTORY_NAME)/$$pkg/$(YOCTO_PKG_TYPE); \
			PACKAGE_FS=`ls | grep -v "\-doc" | grep -v "\-dbg"  | grep -v "\-test" | grep -v "\-pod"  | grep -v "\-misc" | grep -v "\-dev"  | grep -v "\-staticdev"`; \
			if [ ! -z  `echo $$PACKAGE_FS | cut -d' ' -f1` ] ; then \
				cp -u $$PACKAGE_FS $(YOCTO_PATH)/$(YOCTO_DEST_DIR)/packages ;\
			fi; \
			cd ${YOCTO_PATH} ;\
	done
endif


######################
#   Yocto packages   #
######################

yocto_packages:
	$(V)for i in `grep CONFIG_FS_YOCTO_SET ${DEVDIR}/bsp/mach/bspconfig  | cut -d'=' -f1 -s`; do \
		echo $${i#CONFIG_FS_YOCTO_SET_} | tr '[A-Z]' '[a-z]' >> ${YOCTO_BUILD_FILE} ;\
	done

###################################
#   RR SDK installation packages  #
###################################

yocto_install: yocto_install_dev yocto_install_fs

yocto_install_dev:
	$(V) if [ -e  $(YOCTO_PATH)/$(BUILT_FLAG) ]; then \
	    mkdir -p $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR) ;\
	for package in $(shell ls ${YOCTO_DEST_DIR}/dev-packages/); do \
			dpkg-deb -x $(YOCTO_DEST_DIR)/dev-packages/$$package $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/developer; \
		done ; \
	 if [ -d  $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/developer/usr/lib/pkgconfig ]; then \
		cd $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/developer/usr/lib/pkgconfig; \
		for pc_file in `ls`; do \
			sed -i -e  "$(CORRECT_PKGCONFIG_SED_EXPRESSION)"  $$pc_file ;\
		done ;\
		cd $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/developer/usr/lib/ ;\
		for la_file in `find . -name "*.la"`; do \
			sed -i -e  "$(CORRECT_LA_SED_EXPRESSION)"  $$la_file ;\
		done ;\
		cp -ru $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/developer/* $(FSDEVROOT) ;\
	fi ;\
	fi

yocto_install_fs:
ifneq ($(CONFIG_FS_YOCTO_DEBUG),)
	$(V)for package in $(shell ls ${YOCTO_DEST_DIR}/dbg-packages/); do \
			dpkg-deb -x $(YOCTO_DEST_DIR)/dbg-packages/$$package $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/target; \
		done
else
	$(V)for package in $(shell ls ${YOCTO_DEST_DIR}/packages/); do \
			dpkg-deb -x $(YOCTO_DEST_DIR)/packages/$$package $(YOCTO_PATH)/$(YOCTO_OVERLAY_DIR)/target; \
		done
endif

	$(V)for pkg in $(FILES); do \
		if [ -d $(YOCTO_SRC_EXTRACT_DIRECTORY_NAME)/$$pkg/scripts ]; then \
			cd $(YOCTO_SRC_EXTRACT_DIRECTORY_NAME)/$$pkg/scripts; \
			for init_script in `ls | grep .sh`; do \
				./$$init_script ;\
			done \
		fi \
	done
	


yocto_uninstall:

yocto_distclean: $(FETCHED_FLAG)_clean yocto_clean

yocto_clean:
	$(V)if [ -e $(BUILT_FLAG) ]; then \
		rm $(YOCTO_BUILD_FILE);\
		rm $(YOCTO_PKG_SRC);\
		rm $(BUILT_FLAG);\
		rm -rf $(YOCTO_DEST_DIR);\
		rm -rf $(YOCTO_OVERLAY_DIR);\
	fi



include $(CLASSES)/fetcher.defs
include $(CLASSES)/rrsdk.defs
########################################################################################################################################################
